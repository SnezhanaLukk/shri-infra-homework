name: Create Release

on:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run test

  release:
    needs: [lint, test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version number
        id: version
        run: echo "VERSION=${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b releases/${{ steps.version.outputs.VERSION }}
          git push origin releases/${{ steps.version.outputs.VERSION }}

      - name: Build Docker image
        run: |
          docker build -t cr.yandex/${{ secrets.CR_ID }}/app:${{ steps.version.outputs.VERSION }} .
          docker tag cr.yandex/${{ secrets.CR_ID }}/app:${{ steps.version.outputs.VERSION }} \
                     cr.yandex/${{ secrets.CR_ID }}/app:${{ steps.version.outputs.VERSION }}_latest

      - name: Login to Yandex CR
        uses: yc-actions/yc-cr-login@v3
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON }}


      - name: Push Docker image
        run: |
          docker push cr.yandex/${{ secrets.CR_ID }}/app:${{ steps.version.outputs.VERSION }}
          docker push cr.yandex/${{ secrets.CR_ID }}/app:${{ steps.version.outputs.VERSION }}_latest

      - name: Create and push git tag
        run: |
          git fetch origin main --depth=1
          git checkout main
          git tag -a v${{ steps.version.outputs.VERSION }} -m "Release v${{ steps.version.outputs.VERSION }}"
          git push origin v${{ steps.version.outputs.VERSION }}

      - name: Get commits since previous release
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          CURRENT_BRANCH="origin/releases/$VERSION"

          git fetch origin +refs/heads/*:refs/remotes/origin/*

          PREVIOUS_BRANCH=$(git branch -r | grep -E 'origin/releases/' | grep -v "$CURRENT_BRANCH" | sort -V | tail -n 1)

          if [ -z "$PREVIOUS_BRANCH" ]; then
            echo "No previous release found, logging all commits from $CURRENT_BRANCH"
            git log $CURRENT_BRANCH --oneline --no-decorate > commits.txt
          else
            COMMIT_OLD=$(git merge-base origin/main $PREVIOUS_BRANCH)
            COMMIT_NEW=$(git merge-base origin/main $CURRENT_BRANCH)

            echo "Previous: $PREVIOUS_BRANCH ($COMMIT_OLD)"
            echo "Current: $CURRENT_BRANCH ($COMMIT_NEW)"

            git log $COMMIT_OLD..$COMMIT_NEW --oneline --no-decorate > commits.txt
          fi

      - name: Update CHANGELOG.md
        run: |
          DATE=$(date -u +'%Y-%m-%d')
          VERSION=${{ steps.version.outputs.VERSION }}
          COMMITS="${{ steps.commits.outputs.COMMITS }}"
          echo -e "## v$VERSION - $DATE\n\n$COMMITS\n\n$(cat CHANGELOG.md)" > CHANGELOG.md

      - name: Commit and push CHANGELOG.md
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout releases/${{ steps.version.outputs.VERSION }}
          git add CHANGELOG.md
          git commit -m "chore: update changelog for v${{ steps.version.outputs.VERSION }}"
          git push --set-upstream origin releases/${{ steps.version.outputs.VERSION }}

      - name: Prepare release issue file
        run: |
          DATE=$(date -u +'%Y-%m-%d %H:%M UTC')
          VERSION=${{ steps.version.outputs.VERSION }}
          AUTHOR=${{ github.actor }}
          REGISTRY="cr.yandex/${{ secrets.CR_ID }}/app:$VERSION"
          COMMITS="$(cat commits.txt)"
          
          echo "## Release v$VERSION" > release_info.md
          echo "Date: $DATE" >> release_info.md
          echo "Author: $AUTHOR" >> release_info.md
          echo "Version: $VERSION" >> release_info.md
          echo "Docker image: \`$REGISTRY\`" >> release_info.md
          echo "" >> release_info.md
          echo "### Commits:" >> release_info.md
          echo "\`\`\`" >> release_info.md
          echo "$COMMITS" | sed 's/^/- /' >> release_info.md
          echo "\`\`\`" >> release_info.md

      - name: Create GitHub issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Release v${{ steps.version.outputs.VERSION }}"
          content-filepath: release_info.md

      - name: Cleanup
        run: rm release_info.md commits.txt